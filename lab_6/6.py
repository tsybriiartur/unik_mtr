import numpy as np

# Матриця прибутків
F = np.array([
    [8, 2, 4],
    [6, 7, 4],
    [4, 7, 5],
    [3, 5, 6]
])

# Ймовірності станів економічного середовища
P = np.array([1/2, 1/3, 1/6])

# Крок 1: Обчислення очікуваного прибутку для кожного проекту
expected_profits = F @ P

# Крок 2: Обчислення дисперсії для кожного проекту
# Дисперсія обчислюється як сума квадратів відхилень від очікуваного значення, зважена на ймовірності.
variances = np.sum(P * (F - expected_profits[:, np.newaxis]) ** 2, axis=1)

# Вектор пріоритетів для комбінування критеріїв Байєса та дисперсії
V = np.array([2, 1])  # У цьому прикладі дисперсія має нижчий пріоритет

# Крок 3: Обчислення компромісної оцінки для кожного проекту
compromise_scores = V[0] * expected_profits + V[1] * variances

# Знаходимо індекс найкращого проекту
best_project_index = np.argmin(compromise_scores)
best_project = best_project_index + 1  # Додаємо 1 для відповідності з нумерацією завдання

# Виведення результатів
print("Очікувані прибутки для кожного проекту:", expected_profits)
print("Дисперсії для кожного проекту:", variances)
print("Компромісні оцінки для кожного проекту:", compromise_scores)
print("Найкращий проект:", best_project)
